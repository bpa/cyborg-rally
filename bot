#!/usr/bin/env perl

use strict;
use warnings;

use AnyEvent;
use AnyEvent::Handle;
use AnyEvent::Socket;
use Data::Dumper;
use JSON::XS;
$Data::Dumper::Terse = 1;

our $| = 1;

my $json = JSON::XS->new;
my $cv = AnyEvent->condvar;
my $num = $ARGV[0] || 4;
my $state;

for my $i ( 1 .. $num ) {
    tcp_connect
      localhost => 3001,
      sub {
        my ($fh) = @_;
        unless ($fh) {
            $cv->send;
            print "unable to connect: $!\n";
            return;
        }

        my $bot = Bot->new( "$i/$num", $fh );
        my $handle;
        $handle = new AnyEvent::Handle
          fh      => $fh,
          on_read => sub {
            eval {
                for my $msg ($json->incr_parse($_[0]->rbuf)) {
                    $bot->on_message($msg);
                }
            };
            $_[0]->rbuf = '';
          },
          on_error => sub {
            $_[0]->destroy;
          },
          on_eof => sub {
            $handle->destroy;
            $cv->send;
          };

      };
}

$cv->recv;

package Bot;

use Term::ANSIColor;
use Data::Dumper;
use Time::HiRes 'usleep';

sub new {
    my ( $pkg, $name, $fh ) = @_;
    return bless { name => $name, fh => $fh, primary => !!($name =~ m#1/#) }, $pkg;
}

sub on_message {
    my ( $self, $msg ) = @_;
    if ($self->{primary}) {
        print STDERR color($msg->{cmd} eq 'error' ? 'red' : 'green');
        print STDERR Dumper $msg;
        print STDERR color('reset');
    }
	return unless $msg->{cmd};
	my $f = "do_" . $msg->{cmd};
	$self->$f($msg);
}

sub send {
    my ( $self, $cmd, $msg ) = @_;
    if ( ref($cmd) eq '') {
        $msg->{cmd} = $cmd;
    }
    else {
        $msg = $cmd;
    }
    if ($self->{primary}) {
        print STDERR color('yellow');
        print STDERR Dumper $msg;
        print STDERR color('reset');
    }
    syswrite $self->{fh}, $json->encode($msg);
}

sub do_welcome {
    my ( $self, $msg ) = @_;
    $self->send( login => { name => $self->{name} } );
}

sub do_login {
    my ( $self, $msg ) = @_;
	$self->{token} = $msg->{token};
}

sub do_join {
    my ( $self, $msg ) = @_;
    $state->{public}{player}{$msg->{id}} = $msg->{player};
}

sub do_joined {
    my ( $self, $msg ) = @_;
    $state = $msg;
}

sub do_create_game {
    my ( $self, $msg ) = @_;
	$self->send('join' => { name => $msg->{name} });
}

sub do_programming {
    my ( $self, $msg ) = @_;
    #$self->send({cmd => 'program', registers => [@{$msg->{cards}}[0..4]]});
}

sub do_ready {
    my ( $self, $msg ) = @_;
    $self->send('ready') unless $msg->{player} eq $state->{id};
}

sub do_shutdown {
    my ( $self, $msg ) = @_;
    $self->send('shutdown')
        if $state->{public}{player}{$msg->{player}}{name} !~ m#/#;
}

sub do_touch {
    my ( $self, $msg ) = @_;
    if ($state->{public}{player}{$msg->{player}}{name} !~ m#/#) {
        $self->send({cmd => 'touch', tile => 'floor'});
    }
}

sub do_state {
    my ( $self, $msg ) = @_;
    $state->{public}{state} = $msg->{state};
}

sub do_quit {
    my ( $self, $msg ) = @_;
    if ($state->{game} eq 'Rally' && $msg->{name} !~ m#/#) {
        print Dumper $msg;
        $self->send('quit')
    }
}

1;
