#! /usr/bin/env perl

use strict;
use warnings;

use EV;
use Mojolicious::Lite;
use lib 'lib';
use Admin;
use Cyborg;
use CyborgRally;
use JSON;
use NullSock;
use TcpSock;
use AnyEvent::Handle;
use AnyEvent::Socket;

my $json = JSON->new->convert_blessed;
my $null = NullSock->new;
my $game = CyborgRally->new;

get '/' => sub {
    shift->reply->static('index.html');
};

websocket '/websocket' => sub {
    my $c = shift;
    $c->inactivity_timeout(600);

    my $cyborg = Cyborg->new($c->tx);
    $game->on_connect($cyborg); 

    $c->on(
        message => sub {
            my ( $c, $msg ) = @_;
            $game->on_message($cyborg, $json->decode($msg));
        }
    );

    $c->on(
        finish => sub {
            $game->on_disconnect($cyborg);
            $cyborg->{sock} = $null;
        }
    );
};

tcp_server 0, 3001, sub {
    my $fh = shift;
    my $cyborg = Cyborg->new(TcpSock->new($fh));
    $game->on_connect($cyborg); 

    my $handle;
    my $disconnect = sub {
        $game->on_disconnect($cyborg);
        $cyborg->{sock} = $null;
        $handle->destroy;
    };

    $handle = AnyEvent::Handle->new(
        fh      => $fh,
        poll    => 'r',
        on_read => sub {
			eval {
				for my $msg ($json->incr_parse($_[0]->rbuf)) {
					$game->on_message($cyborg, $msg);
				}
			};
            $cyborg->err($@) if $@;
            $_[0]->rbuf = '';
			return 1;
        },
        on_error => $disconnect,
        on_eof   => $disconnect,
    );
};

tcp_server '127.0.0.1', 3002, sub {
    my $fh = shift;
    my $admin = Admin->new($fh, $game);

    my $handle;
    my $disconnect = sub { $handle->destroy; };

    $handle = AnyEvent::Handle->new(
        fh      => $fh,
        poll    => 'r',
        on_read => sub {
			eval {
                $admin->run($_[0]->rbuf);
			};
            syswrite($fh, $@) if $@;
            $_[0]->rbuf = '';
			return 1;
        },
        on_error => $disconnect,
        on_eof   => $disconnect,
    );
};

if (!$INC{'Mojo/Server/Morbo.pm'}) {
    Mojo::Server::Daemon->new( app => app, listen => ['http://*:3000'] )->run;
}
else {
    app->start;
}
